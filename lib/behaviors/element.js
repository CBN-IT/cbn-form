(function(CbnForm) {
	
	/**
	 * Defines a form element for use with `cbn-form` components suite.
	 * 
	 * There are two types of form elements:
	 * 
	 * - those which do not provide a value (e.g. buttons); they have the {@link #_hasModelValue} set to false;
	 * - the form input elements (that provide a {@link #value} property which can be read and set by the form).
	 * 
	 * When used for inputs, this behavior provides normalized value semantics:
	 * 
	 * - the {@link #value} property provides access to the input's value;
	 * - when the value is changed, the element fires a `value-changed` event;
	 * - you can see whether the value was directly changed by the user or was indirectly changed by checking the event's 
	 *   `event.detail.indirect` boolean value;
	 * - if you want to set the value and avoid firing this event, see {@link #_setIndirectValue}.
	 * 
	 * ## Implementation Details
	 * 
	 * Upon attaching to the DOM, the form element sends a `cbn-form-register` event, which is captured by the first 
	 * ancestor which implements the {@link FormContainer} interface. It will then set the element's {@link #_parentForm} 
	 * property and, optionally, bind its value to a form container model object (so that any changes to the input will 
	 * reflect back to the model and vice versa).
	 * 
	 * @polymerBehavior
	 */
	CbnForm.FormElement = {
		
		properties: {
			
			/**
			 * Input's name. 
			 * 
			 * It is used as form model binding path.
			 * For example, if the name is 'name.first_name' will bind to `model['name']['first_name']`.
			 */
			name: {
				type: String,
				value: ''
			},
			
			/**
			 * Input's value attribute.
			 * 
			 * Should be String for most of the cases, Array for inputs with multiple values and Object for
			 * special input types (e.g. file).
			 * 
			 * @type {String|Number|Array|Object}
			 */
			value: {
				type: String,
				value: '',
				notify: false, /** event is manually fired, see {@link #_fe_valueChanged} */
				observer: '_fe_valueChanged'
			},
			
			/**
			 * Input's default value.
			 * Will be automatically set if the model value is empty.
			 * 
			 * @type {String|Number|Array|Object}
			 */
			defaultValue: {
				type: String,
				value: ''
			},
			
			/**
			 * Whether the input provides a value.
			 */
			_hasModelValue: {
				type: Boolean,
				value: true
			},
			
			/**
			 * The parent form/container of the element.
			 */
			_parentForm: {
				type: Object,
				value: null
			}
			
		},
		
		/**
		 * Defines the common dynamic attributes for all form elements.
		 */
		dynamicAttributes: {
			"type" 		: { type: 'attribute' },
			"name" 		: { type: 'attribute' },
			"defaultValue" : { type: 'attribute' },
			"preview"	: { type: 'attribute' }
		},
		
		/**
		 * Will automatically be set to true if the {@link #value} property is indirectly changed (i.e. from the form's 
		 * model).
		 * 
		 * If used, the `value-changed` event generated by the source component (which made the changes).
		 * 
		 * @type {Boolean}
		 */
		_inputValueIndirectlyChanged: false,
		
		
		// Events
		
		/**
		 * Automatically sent when the element is attached to the document in order to register with the parent form container.
		 * 
		 * Bubbles up the DOM tree and will be stopped by a capturing form container.
		 * 
		 * @event cbn-form-register
		 * @detail {HTMLElement} element The actual element to register (if hidden inside shadow DOM).
		 */
		
		/**
		 * Automatically when the element is detached from the DOM tree to its parent container that previously 
		 * registered it (if any).
		 * 
		 * @event cbn-form-unregister
		 */
		
		/**
		 * Notifies the other components that the input's value is changed.
		 * 
		 * If you want to customize / avoid firing this event while changing the input's value, see {@link #_setIndirectValue}.
		 * 
		 * @event value-changed
		 * @detail {mixed}   value The new value of the input.
		 * @detail {Boolean} indirect If the value was indirectly changed (e.g. by modifying the form model)
		 */
		
		
		// Observers / Event handlers
		
		/**
		 * Sends the `cbn-form-register` event bubbling up the DOM tree.
		 */
		attached: function () {
			this.fire('cbn-form-register', {
				element: this
			});
		},
		
		/**
		 * Sends an event to notify the parent container of the element's detachment.
		 */
		detached: function () {
			if (this._parentForm) {
				this.fire('cbn-form-unregister', {
					element: this
				}, {
					node: this._parentForm,
					bubbles: false
				});
			}
		},
		
		/**
		 * Observer for the form element's {@link #value} property.
		 * 
		 * It manually fires the 'value-changed' event conditionally if {@link #_inputValueIndirectlyChanged} is false.
		 * 
		 * @param {mixed} newValue The new value that was set.
		 */
		_fe_valueChanged: function(newValue) {
			if (this._inputValueIndirectlyChanged) return;
			
			this.fire('value-changed', {
				value: newValue
			});
		},
		
		
		// Protected Methods: (to be used by `cbn-form` components / behavior users)
		
		/**
		 * Changes the input's value programmatically.
		 * 
		 * Should fire notification events (if {@link #_inputValueIndirectlyChanged} is not true).
		 * 
		 * @param value The value to set.
		 * @protected
		 */
		_setValue: function (value) {
			// let the _fe_valueChanged observer handle notifications
			this.value = value;
		},
		
		/**
		 * Changes the input's value indirectly (fires a custom marked `value-changed` event).
		 * 
		 * This is used when the value is changed as a result of a form model change.
		 * 
		 * @param {*}              value The value to set.
		 * @param {object|Boolean} [notification] Notification details to emit. Defaults to `{indirect: true}`. 
		 *                         Set to false to avoid firing the `value-changed` event.
		 * @protected
		 */
		_setIndirectValue: function(value, notification) {
			this._inputValueIndirectlyChanged = true;
			// the _fe_valueChanged observer will synchronously fire and skip the `value-changed` event
			this._setValue(value);
			this._inputValueIndirectlyChanged = false;
			
			if (notification !== false) {
				if (!notification) notification = { indirect: true };
				this.fire('value-changed', this.extend({
					value: value
				}, notification));
			}
		}
		
	};
	
	/**
	 * The FormElement interface declaration (for JSDoc purposes).
	 *
	 * @typedef {Object} CbnForm.FormElement
	 * 
	 * @property {String} name Form element's name.
	 * @property {*} value Input value.
	 * @property {*} defaultValue Input's default value.
	 * @property {Boolean} _hasModelValue Whether the input has a value.
	 * @property {HTMLElement} _parentForm The element's parent form container.
	 * 
	 * Methods:
	 * @property {Function} _setValue Programmatically set the input's value.
	 * @property {Function} _setIndirectValue Set the input's value indirectly.
	 */
	
})(CbnForm);
